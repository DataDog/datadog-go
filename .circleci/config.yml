version: 2.1

orbs:
  os-detect: circleci/os-detect@0.2

executors:
  linux_arm64:
    description: "arm64"
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
  linux_amd64:
    description: "amd64"
    machine:
      image: ubuntu-2004:202101-01
    resource_class: medium

commands:
  install_go_linux:
    parameters:
      arch:
        default: "amd64"
        type: string
      version:
        type: string
    steps:
      - os-detect/init # this setup the '$SUDO' variable
      - run:
          name: "install Golang linux"
          command: |
            if command -v go >/dev/null; then
              if go version | grep -q -F "go<< parameters.version >> "; then
                echo "Binary already exists, skipping download."
                exit 0
              fi
              echo "Error different version of Go already installed: '`go version`' when requested was '<< parameters.version >>'"

              $SUDO rm -rf /usr/local/go
              $SUDO install "--owner=${USER}" -d /usr/local/go
            fi

            echo "Installing the requested version of Go."

            curl --fail --location -sS "https://dl.google.com/go/go<<parameters.version >>.linux-<< parameters.arch >>.tar.gz" \
            | sudo tar --no-same-owner --strip-components=1 --gunzip -x -C /usr/local/go/

            echo "export PATH=$PATH:/usr/local/go/bin" >> $BASH_ENV
            $SUDO chown -R "$(whoami):" /usr/local/go

            go version

  run_tests:
    parameters:
      arch:
        type: string
      go-version:
        type: string
    steps:
      - checkout
      - run: git config --global http.sslVerify false
      - run: go get github.com/stretchr/testify
      - run: go vet ./statsd/...
      - run: go fmt ./statsd/...
      - run:
          name: Run tests
          command: |
            # race detector is only available on amd64
            if [[ "<< parameters.arch >>" == "amd64" ]]
            then
              echo "running with race detector"
              go test -race -v ./statsd/...
            else
              echo "running without race detector"
              go test -v ./statsd/...
            fi

jobs:
  # Those allow us to have the os name in the job name. 'matrix' don't add static parameters to the name in the circleci
  # UI.
  tests_amd64:
    working_directory: /home/circleci/.go_workspace/src/github.com/DataDog/datadog-go
    environment:
      GO111MODULE: auto
    executor: linux_amd64
    parameters:
      go-version:
        type: string
    steps:
      - install_go_linux:
          arch: "amd64"
          version: << parameters.go-version >>
      - run_tests:
          go-version: << parameters.go-version >>
          arch: "amd64"

  tests_arm64:
    working_directory: /home/circleci/.go_workspace/src/github.com/DataDog/datadog-go
    environment:
      GO111MODULE: auto
    executor: linux_arm64
    parameters:
      go-version:
        type: string
    steps:
      - install_go_linux:
          arch: "arm64"
          version: << parameters.go-version >>
      - run_tests:
          go-version: << parameters.go-version >>
          arch: "arm64"

workflows:
  all-tests:
    jobs:
      - tests_amd64:
          matrix:
            parameters:
              go-version: ["1.13", "1.14", "1.15", "1.16"]
      - tests_arm64:
          matrix:
            parameters:
              go-version: ["1.13", "1.14", "1.15", "1.16"]
