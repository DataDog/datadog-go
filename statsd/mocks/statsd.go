// Code generated by MockGen. DO NOT EDIT.
// Source: statsd.go

// Package mock_statsd is a generated GoMock package.
package mock_statsd

import (
	reflect "reflect"
	time "time"

	statsd "github.com/DataDog/datadog-go/v6/statsd"
	gomock "github.com/golang/mock/gomock"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClientInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientInterface)(nil).Close))
}

// Count mocks base method.
func (m *MockClientInterface) Count(name string, value int64, tags []string, rate float64, parameters ...statsd.Parameter) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, value, tags, rate}
	for _, a := range parameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Count", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockClientInterfaceMockRecorder) Count(name, value, tags, rate interface{}, parameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, value, tags, rate}, parameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockClientInterface)(nil).Count), varargs...)
}

// CountWithTimestamp mocks base method.
func (m *MockClientInterface) CountWithTimestamp(name string, value int64, tags []string, rate float64, timestamp time.Time, parameters ...statsd.Parameter) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, value, tags, rate, timestamp}
	for _, a := range parameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountWithTimestamp", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CountWithTimestamp indicates an expected call of CountWithTimestamp.
func (mr *MockClientInterfaceMockRecorder) CountWithTimestamp(name, value, tags, rate, timestamp interface{}, parameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, value, tags, rate, timestamp}, parameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWithTimestamp", reflect.TypeOf((*MockClientInterface)(nil).CountWithTimestamp), varargs...)
}

// Decr mocks base method.
func (m *MockClientInterface) Decr(name string, tags []string, rate float64, parameters ...statsd.Parameter) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, tags, rate}
	for _, a := range parameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Decr", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decr indicates an expected call of Decr.
func (mr *MockClientInterfaceMockRecorder) Decr(name, tags, rate interface{}, parameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, tags, rate}, parameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decr", reflect.TypeOf((*MockClientInterface)(nil).Decr), varargs...)
}

// Distribution mocks base method.
func (m *MockClientInterface) Distribution(name string, value float64, tags []string, rate float64, parameters ...statsd.Parameter) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, value, tags, rate}
	for _, a := range parameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Distribution", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Distribution indicates an expected call of Distribution.
func (mr *MockClientInterfaceMockRecorder) Distribution(name, value, tags, rate interface{}, parameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, value, tags, rate}, parameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distribution", reflect.TypeOf((*MockClientInterface)(nil).Distribution), varargs...)
}

// Event mocks base method.
func (m *MockClientInterface) Event(e *statsd.Event, parameters ...statsd.Parameter) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{e}
	for _, a := range parameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Event", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Event indicates an expected call of Event.
func (mr *MockClientInterfaceMockRecorder) Event(e interface{}, parameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{e}, parameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MockClientInterface)(nil).Event), varargs...)
}

// Flush mocks base method.
func (m *MockClientInterface) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockClientInterfaceMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockClientInterface)(nil).Flush))
}

// Gauge mocks base method.
func (m *MockClientInterface) Gauge(name string, value float64, tags []string, rate float64, parameters ...statsd.Parameter) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, value, tags, rate}
	for _, a := range parameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Gauge", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Gauge indicates an expected call of Gauge.
func (mr *MockClientInterfaceMockRecorder) Gauge(name, value, tags, rate interface{}, parameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, value, tags, rate}, parameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gauge", reflect.TypeOf((*MockClientInterface)(nil).Gauge), varargs...)
}

// GaugeWithTimestamp mocks base method.
func (m *MockClientInterface) GaugeWithTimestamp(name string, value float64, tags []string, rate float64, timestamp time.Time, parameters ...statsd.Parameter) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, value, tags, rate, timestamp}
	for _, a := range parameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GaugeWithTimestamp", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GaugeWithTimestamp indicates an expected call of GaugeWithTimestamp.
func (mr *MockClientInterfaceMockRecorder) GaugeWithTimestamp(name, value, tags, rate, timestamp interface{}, parameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, value, tags, rate, timestamp}, parameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GaugeWithTimestamp", reflect.TypeOf((*MockClientInterface)(nil).GaugeWithTimestamp), varargs...)
}

// GetTelemetry mocks base method.
func (m *MockClientInterface) GetTelemetry() statsd.Telemetry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTelemetry")
	ret0, _ := ret[0].(statsd.Telemetry)
	return ret0
}

// GetTelemetry indicates an expected call of GetTelemetry.
func (mr *MockClientInterfaceMockRecorder) GetTelemetry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTelemetry", reflect.TypeOf((*MockClientInterface)(nil).GetTelemetry))
}

// Histogram mocks base method.
func (m *MockClientInterface) Histogram(name string, value float64, tags []string, rate float64, parameters ...statsd.Parameter) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, value, tags, rate}
	for _, a := range parameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Histogram", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Histogram indicates an expected call of Histogram.
func (mr *MockClientInterfaceMockRecorder) Histogram(name, value, tags, rate interface{}, parameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, value, tags, rate}, parameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Histogram", reflect.TypeOf((*MockClientInterface)(nil).Histogram), varargs...)
}

// Incr mocks base method.
func (m *MockClientInterface) Incr(name string, tags []string, rate float64, parameters ...statsd.Parameter) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, tags, rate}
	for _, a := range parameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Incr", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Incr indicates an expected call of Incr.
func (mr *MockClientInterfaceMockRecorder) Incr(name, tags, rate interface{}, parameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, tags, rate}, parameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockClientInterface)(nil).Incr), varargs...)
}

// IsClosed mocks base method.
func (m *MockClientInterface) IsClosed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClosed indicates an expected call of IsClosed.
func (mr *MockClientInterfaceMockRecorder) IsClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClosed", reflect.TypeOf((*MockClientInterface)(nil).IsClosed))
}

// ServiceCheck mocks base method.
func (m *MockClientInterface) ServiceCheck(sc *statsd.ServiceCheck, parameters ...statsd.Parameter) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{sc}
	for _, a := range parameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ServiceCheck", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceCheck indicates an expected call of ServiceCheck.
func (mr *MockClientInterfaceMockRecorder) ServiceCheck(sc interface{}, parameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sc}, parameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceCheck", reflect.TypeOf((*MockClientInterface)(nil).ServiceCheck), varargs...)
}

// Set mocks base method.
func (m *MockClientInterface) Set(name, value string, tags []string, rate float64, parameters ...statsd.Parameter) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, value, tags, rate}
	for _, a := range parameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockClientInterfaceMockRecorder) Set(name, value, tags, rate interface{}, parameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, value, tags, rate}, parameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockClientInterface)(nil).Set), varargs...)
}

// SimpleEvent mocks base method.
func (m *MockClientInterface) SimpleEvent(title, text string, parameters ...statsd.Parameter) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{title, text}
	for _, a := range parameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SimpleEvent", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SimpleEvent indicates an expected call of SimpleEvent.
func (mr *MockClientInterfaceMockRecorder) SimpleEvent(title, text interface{}, parameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{title, text}, parameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimpleEvent", reflect.TypeOf((*MockClientInterface)(nil).SimpleEvent), varargs...)
}

// SimpleServiceCheck mocks base method.
func (m *MockClientInterface) SimpleServiceCheck(name string, status statsd.ServiceCheckStatus, parameters ...statsd.Parameter) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, status}
	for _, a := range parameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SimpleServiceCheck", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SimpleServiceCheck indicates an expected call of SimpleServiceCheck.
func (mr *MockClientInterfaceMockRecorder) SimpleServiceCheck(name, status interface{}, parameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, status}, parameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimpleServiceCheck", reflect.TypeOf((*MockClientInterface)(nil).SimpleServiceCheck), varargs...)
}

// TimeInMilliseconds mocks base method.
func (m *MockClientInterface) TimeInMilliseconds(name string, value float64, tags []string, rate float64, parameters ...statsd.Parameter) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, value, tags, rate}
	for _, a := range parameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TimeInMilliseconds", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// TimeInMilliseconds indicates an expected call of TimeInMilliseconds.
func (mr *MockClientInterfaceMockRecorder) TimeInMilliseconds(name, value, tags, rate interface{}, parameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, value, tags, rate}, parameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeInMilliseconds", reflect.TypeOf((*MockClientInterface)(nil).TimeInMilliseconds), varargs...)
}

// Timing mocks base method.
func (m *MockClientInterface) Timing(name string, value time.Duration, tags []string, rate float64, parameters ...statsd.Parameter) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, value, tags, rate}
	for _, a := range parameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Timing", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Timing indicates an expected call of Timing.
func (mr *MockClientInterfaceMockRecorder) Timing(name, value, tags, rate interface{}, parameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, value, tags, rate}, parameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timing", reflect.TypeOf((*MockClientInterface)(nil).Timing), varargs...)
}
